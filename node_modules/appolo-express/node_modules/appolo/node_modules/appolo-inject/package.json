{
  "name": "appolo-inject",
  "description": "dependency injection for node js",
  "keywords": [],
  "author": {
    "name": "Roman Svichar",
    "email": "shmoop207@gmail.com"
  },
  "main": "./index.js",
  "version": "0.3.6",
  "license": "Mit",
  "repository": {
    "type": "git",
    "url": "https://github.com/shmoop207/appolo-inject"
  },
  "readme": "Appolo Inject\r\n=======\r\n[Dependency Injection][1] framework for nodejs.\r\nworks best with [appolo-class][2] system but can be used as standalone.\r\n\r\n## Installation ##\r\n```javascript\r\nnpm install appolo-inject --save\r\n```\r\n\r\n## Usage ##\r\n### Creating injection container ###\r\n```javascript\r\n var inject = require('appolo-inject');\r\n \r\n var injector = inject.createContainer();\r\n\r\ninjector.addDefinitions({...});\r\n\r\ninjector.initialize();\r\n\r\n```\r\n\r\n### Add Definitions to injecor ###\r\nthe definition object key is used for object class id.\r\n```javascript\r\nvar Class = require('appolo-class');\r\n var inject = require('appolo-inject');\r\n \r\n var injector = inject.createContainer();\r\n\r\nvar FooController = Class.define({\r\n    constructor: function () {\r\n    \r\n    }\r\n});\r\n\r\ninjector.addDefinitions({\r\n    fooController: {\r\n        type: FooController\r\n    }\r\n});\r\n\r\ninjector.initialize();\r\n\r\n//get fooController instance from the injector\r\nvar fooController = injector.getObject('fooController');\r\n\r\n```\r\n###Appolo Class Plugin###\r\nIn the following examples we will use `appolo-class` plugin to add `definitions`.\r\nit will call `addDefinitions` with `$config` object when the class is defined or required. \r\nyou need to call `inject.useAppoloClass` only once.\r\n```javascript\r\nvar inject = require('appolo-inject'),\r\n    Class = require('appolo-class');\r\n\r\nvar injector = inject.createContainer();\r\n\r\n//add appolo class and the injector to inject plugin\r\ninject.useAppoloClass(Class,injector);\r\n\r\n//define your classes\r\nvar FooController = Class.define({\r\n    $config:{\r\n        id:'fooController'\r\n    },\r\n    constructor: function () {\r\n    \r\n    },\r\n    ...\r\n});\r\n\r\n//Call injector.initialize() and your ready to go\r\ninjector.initialize();\r\n\r\n//get fooController instance from the injector\r\nvar fooController = injector.getObject('fooController');\r\n```\r\n### Get Object###\r\nget object from the injector if the object is not singleton you will get new instance every time.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooController',\r\n        singleton: true\r\n    },\r\n    constructor: function () {\r\n\r\n    },\r\n    ...\r\n});\r\n\r\nvar fooController = injector.getObject('fooController');\r\nvar fooController2 = injector.getObject('fooController');\r\n\r\nconsole.log(fooController === fooController2) // false\r\n\r\n```\r\n\r\n### Singleton###\r\nthe class will be created only once and `getObject` will return the same instance every time.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooController',\r\n        singleton: true\r\n    },\r\n    constructor: function () {\r\n    \r\n    },\r\n    ...\r\n});\r\n\r\nvar fooController = injector.getObject('fooController');\r\nvar fooController2 = injector.getObject('fooController');\r\n\r\nconsole.log(fooController === fooController2) // true\r\n\r\n```\r\n\r\n### Inject Property Instance###\r\n`inject` will try in inject object id to the same property name.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'foo'\r\n    }\r\n});\r\n\r\nClass.define({\r\n     $config:{\r\n        id:'barManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'bar'\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n        inject: ['fooManager', 'barManager']\r\n    },\r\n    name: function () {\r\n        return this.fooManager.name() + this.barManager.name()\r\n    }\r\n});\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n console.log(buzzController.name()) // foobar \r\n\r\n```\r\n\r\n### Inject Property Referance By Name###\r\nyou can set the name of the property the object will be injected to.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'foo'\r\n    }\r\n});\r\n\r\nClass.define({\r\n     $config:{\r\n        id:'barManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'bar'\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n         properties: [{\r\n            name: 'foo',\r\n            ref: 'fooManager'\r\n        },{\r\n            name: 'bar',\r\n            ref: 'barManager'\r\n        }]\r\n    },\r\n    name: function () {\r\n        return this.foo.name() + this.bar.name()\r\n    }\r\n});\r\n\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n console.log(buzzController.name()) // foobar \r\n\r\n```\r\n\r\n### Inject Property Value ###\r\nyou can inject any value to object propery.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true,\r\n        properties: [{\r\n            name: 'name',\r\n            value: 'foo'\r\n        }\r\n    },\r\n    name: function () {\r\n        return this.name;\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n         properties: [{\r\n            name: 'foo',\r\n            ref: 'fooManager'\r\n        }]\r\n    },\r\n    name: function () {\r\n        return this.foo.name()\r\n    }\r\n});\r\n....\r\n \r\n var buzzController = injector.getObject('buzzController');\r\n console.log(buzzController.name()) // foo \r\n\r\n```\r\n\r\n### Inject Constructor Arguments ###\r\nyou can inject objects to constructor arguments you can inject object instance by id or by value.\r\nit is not recommended to inject objects to constructor because you can easily get circular reference.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true,\r\n        properties: [{\r\n            name: 'name',\r\n            value: 'foo'\r\n        }\r\n    },\r\n    name: function () {\r\n        return this.name;\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n         args: [{\r\n            ref: 'fooManager'\r\n        },{\r\n            value:'buzz'\r\n        }]\r\n    },\r\n     constructor: function (fooManager,name) {\r\n        this.fooManager = fooManager;\r\n        this.name = name;\r\n    },\r\n    name: function () {\r\n        return this.name + this.foo.name()\r\n    }\r\n});\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n console.log(buzzController.name()) // buzzfoo \r\n\r\n```\r\nyou can also pass runtime arguments to `getObject` function\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n         args: [{\r\n            value:'buzz'\r\n        }]\r\n    },\r\n     constructor: function (name,name2) {\r\n        this.name = name;\r\n        this.name2 = name2;\r\n    },\r\n    name: function () {\r\n        return this.name + this.name2\r\n    }\r\n});\r\n\r\nvar buzzController = injector.getObject('buzzController',['foo']);\r\nconsole.log(buzzController.name()) // buzzfoo \r\n```\r\n\r\n### Inject Property Array###\r\nyou can inject `array` of properties by `refernce` or by `value`.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'foo'\r\n    }\r\n});\r\n\r\nClass.define({\r\n     $config:{\r\n        id:'barManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'bar'\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n        properties: [{\r\n            name: 'objects',\r\n            array: [{\r\n                ref: 'fooManager'\r\n            },{\r\n                ref: 'barManager'\r\n            }]\r\n        }]\r\n    },\r\n    name: function () {\r\n        this.objects.forEach(function(obj){\r\n            console.log(obj.getName())\r\n        });   \r\n    }\r\n});\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n buzzController.name() // foo bar \r\n\r\n```\r\n\r\n### Inject Property Dictionary###\r\nyou can inject `dictionary` of properties by `refernce` or by `value`.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'foo'\r\n    }\r\n});\r\n\r\nClass.define({\r\n     $config:{\r\n        id:'barManager',\r\n        singleton: true\r\n    },\r\n    name: function () {\r\n        return 'bar'\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n        properties: [{\r\n            name: 'objects',\r\n            dictionary: [\r\n                {key:'foo',ref: 'fooManager'},\r\n                {key:'bar',ref: 'barManager'},\r\n                {key:'baz',value: 'baz'}\r\n            ]\r\n        }]\r\n    },\r\n    name: function () {\r\n        return this.objects.foo.name() + this.objects.bar.name() + this.objects.baz;\r\n    }\r\n});\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n buzzController.name() // foobarbaz \r\n\r\n```\r\n\r\n### Inject Property From Object Property###\r\nyou can inject property from other object property.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true\r\n    },\r\n    constructor: function () {\r\n        this.name = 'foo';\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n        properties: [{\r\n            name: 'otherObjectProperty',\r\n            objectProperty: {\r\n                object:'fooManager',\r\n                property:'name'\r\n            }\r\n        }]\r\n    },\r\n    name: function () {\r\n        return return this.otherObjectProperty;\r\n    }\r\n});\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n buzzController.name() // foo\r\n```\r\n\r\n### Inject Property From Factory Object###\r\nfactory object must have implement `get` method witch will be called in order to inject the object instance.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'barManager',\r\n        singleton: true\r\n    },\r\n    name:function(){\r\n        return 'bar'; \r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'fooFactory',\r\n        singleton: true,\r\n        inject: ['barManager']\r\n    },\r\n    get: function () {\r\n        return this.barManager;\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n        properties: [{\r\n            name: 'manager',\r\n            factory: 'fooFactory'\r\n        }]\r\n    },\r\n    name: function () {\r\n        return this.manager.name();\r\n    }\r\n});\r\n....\r\n\r\n var buzzController = injector.getObject('buzzController');\r\n buzzController.name() // bar \r\n\r\n```\r\n\r\n### Inject Factory Method###\r\nfactory method is a function that will return the injected object.\r\nthis is usefull the create many instances of the same class.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'person'\r\n    },\r\n    constructor: function (name) {\r\n        this.name = name;\r\n    },\r\n    name:function(){\r\n        return this.name; \r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'fooController',\r\n        properties: [{\r\n            name: 'createPerson',\r\n            factoryMethod: 'person'\r\n        }]\r\n    },\r\n    name: function () {\r\n        return this.createPerson('foo').name();\r\n    }\r\n});\r\n....\r\n var buzzController = injector.getObject('buzzController');\r\n buzzController.name() // foo \r\n\r\n```\r\n\r\n### Init Method###\r\nThe `init method` will be called after all instances were created and all the properties injected.\r\n```javascript\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager'\r\n    },\r\n    name:function(){\r\n        return 'foo'; \r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'fooController',\r\n        initMethod:'initialize',\r\n        inject:['fooManager']\r\n    },\r\n    initialize:function(){\r\n        this.name = this.fooManager.name()\r\n    }\r\n    \r\n    name: function () {\r\n        return this.name\r\n    }\r\n});\r\n....\r\n\r\n var fooController = injector.getObject('fooController');\r\n fooController.name() // foo \r\n\r\n```\r\n### Injector Aware ###\r\nyou can get reference to the injector container by adding `injectorAware` the injector will be injected to `$injector` property.\r\n\r\n```javascript\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'fooController',\r\n       injectorAware:true\r\n    },\r\n    initialize:function(){\r\n        this.$injector.getObject('foo')\r\n    }\r\n});\r\n....\r\n\r\n```\r\n\r\n### Alias ###\r\nyou can add alias names to classes and get all the classes by single alias\r\n\r\n```javascript\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'fooManager',\r\n        singleton: true,\r\n        alias:['nameable']\r\n    },\r\n    name:function(){\r\n        return 'foo'\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'barManager',\r\n        singleton: true,\r\n        alias:['nameable']\r\n    },\r\n    name:function(){\r\n        return 'bar'\r\n    }\r\n});\r\n\r\nClass.define({\r\n    $config:{\r\n        id:'buzzController',\r\n        singleton: true,\r\n        props: [{\r\n            name: 'nameableObjects',\r\n            alias: 'nameable'\r\n        }]\r\n    },\r\n    name:function(){\r\n       this.nameableObjects.forEach(function(obj){\r\n            console.log(obj.name())\r\n        });  \r\n    }\r\n});\r\n\r\nvar buzzController = injector.getObject('buzzController');\r\n buzzController.name() // foobar \r\n\r\n....\r\n\r\n```\r\n\r\n\r\n\r\n## Tests ##\r\n```javascript\r\n    grunt test\r\n```\r\n\r\n## License ##\r\n\r\nThe `appolo inject` library is released under the MIT license. So feel free to modify and distribute it as you wish.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Dependency_injection\r\n  [2]: https://github.com/shmoop207/appolo-class\r\n",
  "readmeFilename": "README.md",
  "dependencies": {
    "lodash": "2.4.1",
    "appolo-class": "*"
  },
  "devDependencies": {
    "chai": "1.8.1",
    "grunt": "*",
    "grunt-mocha-test": "0.8.1",
    "sinon": "^1.8.2",
    "sinon-chai": "^2.5.0"
  },
  "bugs": {
    "url": "https://github.com/shmoop207/appolo-inject/issues"
  },
  "homepage": "https://github.com/shmoop207/appolo-inject",
  "_id": "appolo-inject@0.3.6",
  "dist": {
    "shasum": "d2850cc9413e14f050361716eab8f99e5d7584e8"
  },
  "_resolved": "git://github.com/shmoop207/appolo-inject#cc2097f7ff7b962d0e2675d5f7eb5411acb37be8",
  "_from": "appolo-inject@git://github.com/shmoop207/appolo-inject"
}
