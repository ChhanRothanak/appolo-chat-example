{
  "name": "appolo-class",
  "description": "class system for node js",
  "keywords": [],
  "author": {
    "name": "Roman Svichar",
    "email": "shmoop207@gmail.com"
  },
  "main": "./index.js",
  "version": "0.1.9",
  "license": "Mit",
  "repository": {
    "type": "git",
    "url": "https://github.com/shmoop207/appolo-class"
  },
  "readme": "Appolo Class  [![Build Status](https://travis-ci.org/shmoop207/appolo-class.png?branch=master)](https://travis-ci.org/shmoop207/appolo-class) [![Dependencies status](https://david-dm.org/shmoop207/appolo-class.png)](https://david-dm.org/shmoop207/appolo-class)\r\n=======\r\nClassical JavaScript inheritance pattern and full class system for nodejs.\r\n\r\n## Installation ##\r\n```javascript\r\nnpm install appolo-class --save\r\n```\r\n\r\n## Usage ##\r\n### creating simple class ###\r\n```javascript\r\nvar Rectangle = Class.define({\r\n    area: function () {\r\n        return 25;\r\n    }\r\n});\r\n\r\n var rectangle = new Rectangle();\r\n```\r\n\r\ncreating class with constractor\r\n```javascript\r\nvar Rectangle = Class.define({\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\nvar rectangle = new Rectangle(5, 5);\r\n\r\nconsole.log(rectangle.area()) // 25\r\n```\r\n### Inheritance  ###\r\n```javascript\r\nvar Rectangle = Class.define({\r\n\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\nvar Square = Class.define({\r\n\r\n    $config: {\r\n        extends: Rectangle\r\n    },\r\n    \r\n    constructor: function (side) {\r\n        this.callParent(this, side, side);\r\n    }\r\n});\r\n\r\nvar square = new Square(6);\r\n\r\nconsole.log(square.area()) // 36\r\n```\r\nyou can also use `Class.define` fucntion\r\n```javascript\r\nvar Rectangle = Class.define({\r\n\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\nvar Square = Rectangle.define({\r\n\r\n    constructor: function (side) {\r\n        this.callParent(side, side);\r\n    }\r\n});\r\n\r\nvar square = new Square(6);\r\n\r\nconsole.log(square.area()) // 36\r\n```\r\n\r\n### Call Parent ###\r\nuse `this.callParent` function to call the parent method\r\n```javascript\r\nvar Rectangle = Class.define({\r\n\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\nvar Square = Rectangle.define({\r\n\r\n    constructor: function (side) {\r\n        this.callParent(side, side);\r\n    }\r\n});\r\n\r\nvar Cube = Square.define({\r\n\r\n    constructor: function (side) {\r\n        this.callParent(side);\r\n\r\n        this.side = side;\r\n    },\r\n\r\n    area: function () {\r\n        return 6 * this.callParent()\r\n    },\r\n\r\n    volume: function () {\r\n        return Math.pow(this.side,3);\r\n    }\r\n});\r\n\r\nvar cube = new Cube(5);\r\n\r\nconsole.log(cube.area()) //150;\r\nconsole.log(cube.volume()) //125;\r\n```\r\n### Statics ###\r\n```javascript\r\nvar Rectangle = Class.define({\r\n    $config: {\r\n        statics: {\r\n            MIN_SIDE: 1,\r\n            MAX_SIDE: 150\r\n        }\r\n    },\r\n\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\n\r\nconsole.log(Rectangle.MIN_SIDE) //1;\r\n\r\nvar rectangle = new Rectangle(5, 5);\r\nconsole.log(rectangle.MIN_SIDE.should.equal(1)) //1;\r\n```\r\n## Mixin ###\r\nused to add protoype functions from other classes\r\n```javascript\r\nvar Events = Class.define({\r\n    bind: function (event, fn) {\r\n        return true;\r\n    },\r\n    unbind: function (event, fn) {\r\n        return true;\r\n    }\r\n});\r\n\r\nvar Rectangle = Class.define({\r\n    $config: {\r\n        mixins: [Events]\r\n    },\r\n\r\n    constructor: function (width, height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    },\r\n\r\n    area: function () {\r\n        return this.width * this.height;\r\n    }\r\n});\r\n\r\nvar rectangle = new Rectangle(5, 5);\r\nrectangle.bind('test',function(){})\r\nrectangle.unbind('test',function(){})\r\n```\r\n### Namespace ###\r\ncreate class on the global scope global scope\r\n```javascript\r\nClass.define('Test.Position.Base', {\r\n\r\n    constructor: function (symbol, amount, side) {\r\n\r\n        this.symbol = symbol;\r\n        this.amount = amount;\r\n        this.side = side;\r\n    }\r\n});\r\n\r\nPosition.define('Test.Position.Long', {\r\n\r\n    constructor: function (symbol, amount) {\r\n        this.callParent( symbol, amount, 2);\r\n    }\r\n});\r\n\r\nPosition.define(\"Test.Position.Short\", {\r\n\r\n    constructor: function (symbol, amount) {\r\n\r\n        this.callParent(symbol, amount, 2);\r\n    }\r\n});\r\n\r\nvar short = new Test.Position.Short();\r\nvar long = new Test.Position.Long();\r\n```\r\n### Contractor Name ###\r\nyou can define the class name\r\n```javascript\r\nvar Position = Class.define({\r\n\r\n    constructor: function (symbol, amount, side) {\r\n\r\n        this.symbol = symbol;\r\n        this.amount = amount;\r\n        this.side = side;\r\n\r\n    }\r\n});\r\n\r\nvar Long = Position.define({\r\n    $config: {\r\n        name: \"long\"\r\n    },\r\n\r\n    constructor: function (symbol, amount) {\r\n        this.callParent( symbol, amount, 2);\r\n    }\r\n});\r\n\r\nvar Short = Position.define({\r\n    $config: {\r\n        name: \"short\"\r\n    },\r\n    constructor: function (symbol, amount) {\r\n\r\n        this.callParent(symbol, amount, 2);\r\n    }\r\n});\r\n\r\n\r\nvar short = new Short();\r\nvar long = new Long();\r\n\r\nconsloe.log(short.constructor.name) // short\r\nconsole.log(long.constructor.name) //long;\r\n```\r\n\r\n## Plugins ##\r\nyou can your custom plugins to the class system by adding callback function\r\nthe function will be called with 3 `arguments`\r\n - `config` - config object of the class\r\n - `klass` - class referance\r\n - `parent` - parent class referance\r\n\r\n```javascript\r\nClass.addPlugin(function(config,klass,parent){\r\n    //do something\r\n});\r\n```\r\n\r\n## Tests ##\r\n```javascript\r\n    grunt test\r\n```\r\n\r\n## License ##\r\n\r\nThe `appolo class` library is released under the MIT license. So feel free to modify and distribute it as you wish.\r\n",
  "readmeFilename": "README.md",
  "dependencies": {
    "lodash": "2.4.1"
  },
  "devDependencies": {
    "chai": "1.8.1",
    "grunt": "*",
    "grunt-mocha-test": "0.8.1"
  },
  "bugs": {
    "url": "https://github.com/shmoop207/appolo-class/issues"
  },
  "homepage": "https://github.com/shmoop207/appolo-class",
  "_id": "appolo-class@0.1.9",
  "dist": {
    "shasum": "34a1abfa8fa3962986ad4fcd7659af69f8508455"
  },
  "_resolved": "git://github.com/shmoop207/appolo-class#ad67f60227494f25a559f2fcd71ebde21f07cd9c",
  "_from": "appolo-class@git://github.com/shmoop207/appolo-class"
}
